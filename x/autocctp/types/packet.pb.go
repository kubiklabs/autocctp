// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: noble/autocctp/v1/packet.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DepositForBurnData struct {
	DestinationDomain uint32                `protobuf:"varint,1,opt,name=destination_domain,json=destinationDomain,proto3" json:"destination_domain,omitempty"`
	MintRecipient     string                `protobuf:"bytes,2,opt,name=mint_recipient,json=mintRecipient,proto3" json:"mint_recipient,omitempty"`
	Amount            cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *DepositForBurnData) Reset()         { *m = DepositForBurnData{} }
func (m *DepositForBurnData) String() string { return proto.CompactTextString(m) }
func (*DepositForBurnData) ProtoMessage()    {}
func (*DepositForBurnData) Descriptor() ([]byte, []int) {
	return fileDescriptor_90b83cbcd5573aa8, []int{0}
}
func (m *DepositForBurnData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepositForBurnData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepositForBurnData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DepositForBurnData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositForBurnData.Merge(m, src)
}
func (m *DepositForBurnData) XXX_Size() int {
	return m.Size()
}
func (m *DepositForBurnData) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositForBurnData.DiscardUnknown(m)
}

var xxx_messageInfo_DepositForBurnData proto.InternalMessageInfo

func (m *DepositForBurnData) GetDestinationDomain() uint32 {
	if m != nil {
		return m.DestinationDomain
	}
	return 0
}

func (m *DepositForBurnData) GetMintRecipient() string {
	if m != nil {
		return m.MintRecipient
	}
	return ""
}

type DepositForBurnWithCaller struct {
	DestinationDomain uint32                `protobuf:"varint,1,opt,name=destination_domain,json=destinationDomain,proto3" json:"destination_domain,omitempty"`
	MintRecipient     string                `protobuf:"bytes,2,opt,name=mint_recipient,json=mintRecipient,proto3" json:"mint_recipient,omitempty"`
	Amount            cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
	DestinationCaller []byte                `protobuf:"bytes,4,opt,name=destination_caller,json=destinationCaller,proto3" json:"destination_caller,omitempty"`
}

func (m *DepositForBurnWithCaller) Reset()         { *m = DepositForBurnWithCaller{} }
func (m *DepositForBurnWithCaller) String() string { return proto.CompactTextString(m) }
func (*DepositForBurnWithCaller) ProtoMessage()    {}
func (*DepositForBurnWithCaller) Descriptor() ([]byte, []int) {
	return fileDescriptor_90b83cbcd5573aa8, []int{1}
}
func (m *DepositForBurnWithCaller) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DepositForBurnWithCaller) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DepositForBurnWithCaller.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DepositForBurnWithCaller) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DepositForBurnWithCaller.Merge(m, src)
}
func (m *DepositForBurnWithCaller) XXX_Size() int {
	return m.Size()
}
func (m *DepositForBurnWithCaller) XXX_DiscardUnknown() {
	xxx_messageInfo_DepositForBurnWithCaller.DiscardUnknown(m)
}

var xxx_messageInfo_DepositForBurnWithCaller proto.InternalMessageInfo

func (m *DepositForBurnWithCaller) GetDestinationDomain() uint32 {
	if m != nil {
		return m.DestinationDomain
	}
	return 0
}

func (m *DepositForBurnWithCaller) GetMintRecipient() string {
	if m != nil {
		return m.MintRecipient
	}
	return ""
}

func (m *DepositForBurnWithCaller) GetDestinationCaller() []byte {
	if m != nil {
		return m.DestinationCaller
	}
	return nil
}

type CctpData struct {
	// Types that are valid to be assigned to MessageType:
	//
	//	*CctpData_DepositForBurn
	//	*CctpData_DepositForBurnWithCaller
	MessageType isCctpData_MessageType `protobuf_oneof:"message_type"`
}

func (m *CctpData) Reset()         { *m = CctpData{} }
func (m *CctpData) String() string { return proto.CompactTextString(m) }
func (*CctpData) ProtoMessage()    {}
func (*CctpData) Descriptor() ([]byte, []int) {
	return fileDescriptor_90b83cbcd5573aa8, []int{2}
}
func (m *CctpData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CctpData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CctpData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CctpData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CctpData.Merge(m, src)
}
func (m *CctpData) XXX_Size() int {
	return m.Size()
}
func (m *CctpData) XXX_DiscardUnknown() {
	xxx_messageInfo_CctpData.DiscardUnknown(m)
}

var xxx_messageInfo_CctpData proto.InternalMessageInfo

type isCctpData_MessageType interface {
	isCctpData_MessageType()
	MarshalTo([]byte) (int, error)
	Size() int
}

type CctpData_DepositForBurn struct {
	DepositForBurn *DepositForBurnData `protobuf:"bytes,1,opt,name=deposit_for_burn,json=depositForBurn,proto3,oneof" json:"deposit_for_burn,omitempty"`
}
type CctpData_DepositForBurnWithCaller struct {
	DepositForBurnWithCaller *DepositForBurnWithCaller `protobuf:"bytes,2,opt,name=deposit_for_burn_with_caller,json=depositForBurnWithCaller,proto3,oneof" json:"deposit_for_burn_with_caller,omitempty"`
}

func (*CctpData_DepositForBurn) isCctpData_MessageType()           {}
func (*CctpData_DepositForBurnWithCaller) isCctpData_MessageType() {}

func (m *CctpData) GetMessageType() isCctpData_MessageType {
	if m != nil {
		return m.MessageType
	}
	return nil
}

func (m *CctpData) GetDepositForBurn() *DepositForBurnData {
	if x, ok := m.GetMessageType().(*CctpData_DepositForBurn); ok {
		return x.DepositForBurn
	}
	return nil
}

func (m *CctpData) GetDepositForBurnWithCaller() *DepositForBurnWithCaller {
	if x, ok := m.GetMessageType().(*CctpData_DepositForBurnWithCaller); ok {
		return x.DepositForBurnWithCaller
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*CctpData) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*CctpData_DepositForBurn)(nil),
		(*CctpData_DepositForBurnWithCaller)(nil),
	}
}

type CctpMemo struct {
	Circle *CctpMemo_CctpDataWrapper `protobuf:"bytes,1,opt,name=circle,proto3" json:"circle,omitempty"`
}

func (m *CctpMemo) Reset()         { *m = CctpMemo{} }
func (m *CctpMemo) String() string { return proto.CompactTextString(m) }
func (*CctpMemo) ProtoMessage()    {}
func (*CctpMemo) Descriptor() ([]byte, []int) {
	return fileDescriptor_90b83cbcd5573aa8, []int{3}
}
func (m *CctpMemo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CctpMemo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CctpMemo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CctpMemo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CctpMemo.Merge(m, src)
}
func (m *CctpMemo) XXX_Size() int {
	return m.Size()
}
func (m *CctpMemo) XXX_DiscardUnknown() {
	xxx_messageInfo_CctpMemo.DiscardUnknown(m)
}

var xxx_messageInfo_CctpMemo proto.InternalMessageInfo

func (m *CctpMemo) GetCircle() *CctpMemo_CctpDataWrapper {
	if m != nil {
		return m.Circle
	}
	return nil
}

type CctpMemo_CctpDataWrapper struct {
	Cctp *CctpData `protobuf:"bytes,1,opt,name=cctp,proto3" json:"cctp,omitempty"`
}

func (m *CctpMemo_CctpDataWrapper) Reset()         { *m = CctpMemo_CctpDataWrapper{} }
func (m *CctpMemo_CctpDataWrapper) String() string { return proto.CompactTextString(m) }
func (*CctpMemo_CctpDataWrapper) ProtoMessage()    {}
func (*CctpMemo_CctpDataWrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_90b83cbcd5573aa8, []int{3, 0}
}
func (m *CctpMemo_CctpDataWrapper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CctpMemo_CctpDataWrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CctpMemo_CctpDataWrapper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CctpMemo_CctpDataWrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CctpMemo_CctpDataWrapper.Merge(m, src)
}
func (m *CctpMemo_CctpDataWrapper) XXX_Size() int {
	return m.Size()
}
func (m *CctpMemo_CctpDataWrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_CctpMemo_CctpDataWrapper.DiscardUnknown(m)
}

var xxx_messageInfo_CctpMemo_CctpDataWrapper proto.InternalMessageInfo

func (m *CctpMemo_CctpDataWrapper) GetCctp() *CctpData {
	if m != nil {
		return m.Cctp
	}
	return nil
}

func init() {
	proto.RegisterType((*DepositForBurnData)(nil), "noble.autocctp.v1.DepositForBurnData")
	proto.RegisterType((*DepositForBurnWithCaller)(nil), "noble.autocctp.v1.DepositForBurnWithCaller")
	proto.RegisterType((*CctpData)(nil), "noble.autocctp.v1.CctpData")
	proto.RegisterType((*CctpMemo)(nil), "noble.autocctp.v1.CctpMemo")
	proto.RegisterType((*CctpMemo_CctpDataWrapper)(nil), "noble.autocctp.v1.CctpMemo.CctpDataWrapper")
}

func init() { proto.RegisterFile("noble/autocctp/v1/packet.proto", fileDescriptor_90b83cbcd5573aa8) }

var fileDescriptor_90b83cbcd5573aa8 = []byte{
	// 447 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x93, 0xdf, 0x6a, 0x13, 0x41,
	0x14, 0xc6, 0x77, 0x6a, 0x29, 0x3a, 0xb6, 0xd1, 0x0e, 0x0a, 0x4b, 0xd5, 0x6d, 0x08, 0x14, 0x02,
	0xd2, 0x59, 0xa2, 0xf8, 0x02, 0x9b, 0x20, 0x15, 0xf1, 0xc2, 0xbd, 0x29, 0x78, 0xb3, 0x4c, 0x66,
	0xc7, 0x64, 0x68, 0xe6, 0x0f, 0x33, 0x67, 0xab, 0xbe, 0x85, 0xe0, 0x13, 0xf8, 0x36, 0xbd, 0xec,
	0x95, 0x88, 0x48, 0x91, 0xe4, 0x45, 0x64, 0x27, 0xbb, 0xc4, 0xa4, 0x16, 0x6f, 0xbd, 0x1b, 0xce,
	0xef, 0x9c, 0x6f, 0xbe, 0xef, 0x0c, 0x83, 0x13, 0x6d, 0xc6, 0x33, 0x91, 0xb2, 0x0a, 0x0c, 0xe7,
	0x60, 0xd3, 0xf3, 0x41, 0x6a, 0x19, 0x3f, 0x13, 0x40, 0xad, 0x33, 0x60, 0xc8, 0x7e, 0xe0, 0xb4,
	0xe5, 0xf4, 0x7c, 0x70, 0xf0, 0x60, 0x62, 0x26, 0x26, 0xd0, 0xb4, 0x3e, 0x2d, 0x1b, 0x7b, 0x5f,
	0x11, 0x26, 0x23, 0x61, 0x8d, 0x97, 0xf0, 0xd2, 0xb8, 0xac, 0x72, 0x7a, 0xc4, 0x80, 0x91, 0x63,
	0x4c, 0x4a, 0xe1, 0x41, 0x6a, 0x06, 0xd2, 0xe8, 0xa2, 0x34, 0x8a, 0x49, 0x1d, 0xa3, 0x2e, 0xea,
	0xef, 0xe5, 0xfb, 0x7f, 0x90, 0x51, 0x00, 0xe4, 0x08, 0x77, 0x94, 0xd4, 0x50, 0x38, 0xc1, 0xa5,
	0x95, 0x42, 0x43, 0xbc, 0xd5, 0x45, 0xfd, 0x3b, 0xf9, 0x5e, 0x5d, 0xcd, 0xdb, 0x22, 0x79, 0x81,
	0x77, 0x98, 0x32, 0x95, 0x86, 0xf8, 0x56, 0x8d, 0xb3, 0x27, 0x17, 0x57, 0x87, 0xd1, 0x8f, 0xab,
	0xc3, 0x87, 0xdc, 0x78, 0x65, 0xbc, 0x2f, 0xcf, 0xa8, 0x34, 0xa9, 0x62, 0x30, 0xa5, 0xaf, 0x34,
	0xe4, 0x4d, 0x73, 0xef, 0x1b, 0xc2, 0xf1, 0xba, 0xc7, 0x53, 0x09, 0xd3, 0x21, 0x9b, 0xcd, 0x84,
	0xfb, 0xaf, 0x9c, 0x6e, 0x9a, 0xe1, 0xc1, 0x62, 0xbc, 0xdd, 0x45, 0xfd, 0xdd, 0x35, 0x33, 0x4b,
	0xef, 0xbd, 0x9f, 0x08, 0xdf, 0x1e, 0x72, 0xb0, 0x61, 0xe5, 0x6f, 0xf1, 0xfd, 0x72, 0x19, 0xb2,
	0x78, 0x6f, 0x5c, 0x31, 0xae, 0xdc, 0x32, 0xc6, 0xdd, 0x67, 0x47, 0xf4, 0xda, 0x6b, 0xd2, 0xeb,
	0x6f, 0x76, 0x12, 0xe5, 0x9d, 0x72, 0xad, 0x4a, 0x14, 0x7e, 0xbc, 0x29, 0x59, 0x7c, 0x90, 0x30,
	0x6d, 0x8d, 0x6d, 0x05, 0xf9, 0xa7, 0xff, 0x94, 0x5f, 0xad, 0xfb, 0x24, 0xca, 0xe3, 0xf2, 0x06,
	0x96, 0x75, 0xf0, 0xae, 0x12, 0xde, 0xb3, 0x89, 0x28, 0xe0, 0x93, 0x15, 0xbd, 0x2f, 0x4d, 0xbc,
	0x37, 0x42, 0x19, 0x32, 0xc4, 0x3b, 0x5c, 0x3a, 0x3e, 0x13, 0x4d, 0xa8, 0xbf, 0xdd, 0xda, 0x36,
	0xd3, 0x76, 0x29, 0xa7, 0x8e, 0x59, 0x2b, 0x5c, 0xde, 0x8c, 0x1e, 0x64, 0xf8, 0xde, 0x06, 0x22,
	0x29, 0xde, 0xae, 0xc7, 0x1b, 0xd5, 0x47, 0x37, 0xa8, 0xd6, 0x13, 0x79, 0x68, 0xcc, 0x5e, 0x5f,
	0xcc, 0x13, 0x74, 0x39, 0x4f, 0xd0, 0xaf, 0x79, 0x82, 0x3e, 0x2f, 0x92, 0xe8, 0x72, 0x91, 0x44,
	0xdf, 0x17, 0x49, 0xf4, 0x6e, 0x30, 0x91, 0x30, 0xad, 0xc6, 0x94, 0x1b, 0x95, 0x06, 0x99, 0x63,
	0xe6, 0xbd, 0x00, 0xbf, 0xfa, 0x66, 0x1f, 0x57, 0xc7, 0x3a, 0xa1, 0x1f, 0xef, 0x84, 0x5f, 0xf4,
	0xfc, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xa3, 0x7d, 0x6e, 0x5d, 0x90, 0x03, 0x00, 0x00,
}

func (m *DepositForBurnData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepositForBurnData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DepositForBurnData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPacket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.MintRecipient) > 0 {
		i -= len(m.MintRecipient)
		copy(dAtA[i:], m.MintRecipient)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.MintRecipient)))
		i--
		dAtA[i] = 0x12
	}
	if m.DestinationDomain != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.DestinationDomain))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DepositForBurnWithCaller) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DepositForBurnWithCaller) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DepositForBurnWithCaller) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DestinationCaller) > 0 {
		i -= len(m.DestinationCaller)
		copy(dAtA[i:], m.DestinationCaller)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.DestinationCaller)))
		i--
		dAtA[i] = 0x22
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPacket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.MintRecipient) > 0 {
		i -= len(m.MintRecipient)
		copy(dAtA[i:], m.MintRecipient)
		i = encodeVarintPacket(dAtA, i, uint64(len(m.MintRecipient)))
		i--
		dAtA[i] = 0x12
	}
	if m.DestinationDomain != 0 {
		i = encodeVarintPacket(dAtA, i, uint64(m.DestinationDomain))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CctpData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CctpData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CctpData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MessageType != nil {
		{
			size := m.MessageType.Size()
			i -= size
			if _, err := m.MessageType.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *CctpData_DepositForBurn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CctpData_DepositForBurn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DepositForBurn != nil {
		{
			size, err := m.DepositForBurn.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *CctpData_DepositForBurnWithCaller) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CctpData_DepositForBurnWithCaller) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DepositForBurnWithCaller != nil {
		{
			size, err := m.DepositForBurnWithCaller.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *CctpMemo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CctpMemo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CctpMemo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Circle != nil {
		{
			size, err := m.Circle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CctpMemo_CctpDataWrapper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CctpMemo_CctpDataWrapper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CctpMemo_CctpDataWrapper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cctp != nil {
		{
			size, err := m.Cctp.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPacket(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPacket(dAtA []byte, offset int, v uint64) int {
	offset -= sovPacket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DepositForBurnData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DestinationDomain != 0 {
		n += 1 + sovPacket(uint64(m.DestinationDomain))
	}
	l = len(m.MintRecipient)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovPacket(uint64(l))
	return n
}

func (m *DepositForBurnWithCaller) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DestinationDomain != 0 {
		n += 1 + sovPacket(uint64(m.DestinationDomain))
	}
	l = len(m.MintRecipient)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovPacket(uint64(l))
	l = len(m.DestinationCaller)
	if l > 0 {
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *CctpData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MessageType != nil {
		n += m.MessageType.Size()
	}
	return n
}

func (m *CctpData_DepositForBurn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DepositForBurn != nil {
		l = m.DepositForBurn.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *CctpData_DepositForBurnWithCaller) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DepositForBurnWithCaller != nil {
		l = m.DepositForBurnWithCaller.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}
func (m *CctpMemo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Circle != nil {
		l = m.Circle.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func (m *CctpMemo_CctpDataWrapper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cctp != nil {
		l = m.Cctp.Size()
		n += 1 + l + sovPacket(uint64(l))
	}
	return n
}

func sovPacket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPacket(x uint64) (n int) {
	return sovPacket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DepositForBurnData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositForBurnData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositForBurnData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationDomain", wireType)
			}
			m.DestinationDomain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationDomain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintRecipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintRecipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DepositForBurnWithCaller) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DepositForBurnWithCaller: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DepositForBurnWithCaller: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationDomain", wireType)
			}
			m.DestinationDomain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationDomain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintRecipient", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintRecipient = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationCaller", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationCaller = append(m.DestinationCaller[:0], dAtA[iNdEx:postIndex]...)
			if m.DestinationCaller == nil {
				m.DestinationCaller = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CctpData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CctpData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CctpData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositForBurn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DepositForBurnData{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MessageType = &CctpData_DepositForBurn{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositForBurnWithCaller", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DepositForBurnWithCaller{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.MessageType = &CctpData_DepositForBurnWithCaller{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CctpMemo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CctpMemo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CctpMemo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Circle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Circle == nil {
				m.Circle = &CctpMemo_CctpDataWrapper{}
			}
			if err := m.Circle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CctpMemo_CctpDataWrapper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CctpDataWrapper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CctpDataWrapper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cctp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cctp == nil {
				m.Cctp = &CctpData{}
			}
			if err := m.Cctp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPacket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPacket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPacket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPacket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPacket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPacket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPacket = fmt.Errorf("proto: unexpected end of group")
)
